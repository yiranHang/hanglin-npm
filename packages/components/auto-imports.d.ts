/* prettier-ignore */
// @ts-nocheck
// noinspection JSUnusedGlobalSymbols
// Generated by unplugin-auto-import
// biome-ignore lint: disable
export {}
declare global {
  const EffectScope: (typeof import('vue'))['EffectScope']
  const computed: (typeof import('vue'))['computed']
  const createApp: (typeof import('vue'))['createApp']
  const createNamespaceGenerator: (typeof import('./src/utils/index'))['createNamespaceGenerator']
  const crypto: (typeof import('@hanglin/core'))['crypto']
  const customRef: (typeof import('vue'))['customRef']
  const debounce: (typeof import('@hanglin/utils'))['debounce']
  const deepClone: (typeof import('@hanglin/utils'))['deepClone']
  const defineAsyncComponent: (typeof import('vue'))['defineAsyncComponent']
  const defineComponent: (typeof import('vue'))['defineComponent']
  const effectScope: (typeof import('vue'))['effectScope']
  const formatCurrency: (typeof import('@hanglin/utils'))['formatCurrency']
  const formatDate: (typeof import('@hanglin/utils'))['formatDate']
  const formatNumber: (typeof import('@hanglin/utils'))['formatNumber']
  const generateClassName: (typeof import('./src/utils/index'))['generateClassName']
  const getCurrentInstance: (typeof import('vue'))['getCurrentInstance']
  const getCurrentScope: (typeof import('vue'))['getCurrentScope']
  const h: (typeof import('vue'))['h']
  const inject: (typeof import('vue'))['inject']
  const isArray: (typeof import('@hanglin/utils'))['isArray']
  const isBoolean: (typeof import('@hanglin/utils'))['isBoolean']
  const isEmpty: (typeof import('@hanglin/utils'))['isEmpty']
  const isFunction: (typeof import('@hanglin/utils'))['isFunction']
  const isNumber: (typeof import('@hanglin/utils'))['isNumber']
  const isObject: (typeof import('@hanglin/utils'))['isObject']
  const isProxy: (typeof import('vue'))['isProxy']
  const isReactive: (typeof import('vue'))['isReactive']
  const isReadonly: (typeof import('vue'))['isReadonly']
  const isRef: (typeof import('vue'))['isRef']
  const isString: (typeof import('./src/utils/index'))['isString']
  const markRaw: (typeof import('vue'))['markRaw']
  const mergeStyles: (typeof import('./src/utils/index'))['mergeStyles']
  const nextTick: (typeof import('vue'))['nextTick']
  const normalizeProps: (typeof import('./src/utils/index'))['normalizeProps']
  const onActivated: (typeof import('vue'))['onActivated']
  const onBeforeMount: (typeof import('vue'))['onBeforeMount']
  const onBeforeUnmount: (typeof import('vue'))['onBeforeUnmount']
  const onBeforeUpdate: (typeof import('vue'))['onBeforeUpdate']
  const onDeactivated: (typeof import('vue'))['onDeactivated']
  const onErrorCaptured: (typeof import('vue'))['onErrorCaptured']
  const onMounted: (typeof import('vue'))['onMounted']
  const onRenderTracked: (typeof import('vue'))['onRenderTracked']
  const onRenderTriggered: (typeof import('vue'))['onRenderTriggered']
  const onScopeDispose: (typeof import('vue'))['onScopeDispose']
  const onServerPrefetch: (typeof import('vue'))['onServerPrefetch']
  const onUnmounted: (typeof import('vue'))['onUnmounted']
  const onUpdated: (typeof import('vue'))['onUpdated']
  const onWatcherCleanup: (typeof import('vue'))['onWatcherCleanup']
  const provide: (typeof import('vue'))['provide']
  const reactive: (typeof import('vue'))['reactive']
  const readonly: (typeof import('vue'))['readonly']
  const ref: (typeof import('vue'))['ref']
  const request: (typeof import('@hanglin/core'))['request']
  const resolveComponent: (typeof import('vue'))['resolveComponent']
  const shallowReactive: (typeof import('vue'))['shallowReactive']
  const shallowReadonly: (typeof import('vue'))['shallowReadonly']
  const shallowRef: (typeof import('vue'))['shallowRef']
  const storage: (typeof import('@hanglin/core'))['storage']
  const throttle: (typeof import('@hanglin/utils'))['throttle']
  const toRaw: (typeof import('vue'))['toRaw']
  const toRef: (typeof import('vue'))['toRef']
  const toRefs: (typeof import('vue'))['toRefs']
  const toValue: (typeof import('vue'))['toValue']
  const triggerRef: (typeof import('vue'))['triggerRef']
  const unref: (typeof import('vue'))['unref']
  const useAsyncState: (typeof import('./src/hooks/index'))['useAsyncState']
  const useAttrs: (typeof import('vue'))['useAttrs']
  const useCounter: (typeof import('./src/composables/index'))['useCounter']
  const useCssModule: (typeof import('vue'))['useCssModule']
  const useCssVars: (typeof import('vue'))['useCssVars']
  const useDebouncedValue: (typeof import('./src/hooks/index'))['useDebouncedValue']
  const useEventListener: (typeof import('./src/hooks/index'))['useEventListener']
  const useId: (typeof import('vue'))['useId']
  const useInterval: (typeof import('./src/composables/index'))['useInterval']
  const useLocalStorage: (typeof import('./src/composables/index'))['useLocalStorage']
  const useMediaQuery: (typeof import('./src/hooks/index'))['useMediaQuery']
  const useModel: (typeof import('vue'))['useModel']
  const useMouse: (typeof import('./src/composables/index'))['useMouse']
  const useNetworkStatus: (typeof import('./src/hooks/index'))['useNetworkStatus']
  const useSlots: (typeof import('vue'))['useSlots']
  const useTemplateRef: (typeof import('vue'))['useTemplateRef']
  const useToggle: (typeof import('./src/composables/index'))['useToggle']
  const useWindowSize: (typeof import('./src/hooks/index'))['useWindowSize']
  const watch: (typeof import('vue'))['watch']
  const watchEffect: (typeof import('vue'))['watchEffect']
  const watchPostEffect: (typeof import('vue'))['watchPostEffect']
  const watchSyncEffect: (typeof import('vue'))['watchSyncEffect']
  const withModifiers: (typeof import('./src/utils/index'))['withModifiers']
}
// for type re-export
declare global {
  // @ts-ignore
  export type {
    Component,
    Slot,
    Slots,
    ComponentPublicInstance,
    ComputedRef,
    DirectiveBinding,
    ExtractDefaultPropTypes,
    ExtractPropTypes,
    ExtractPublicPropTypes,
    InjectionKey,
    PropType,
    Ref,
    MaybeRef,
    MaybeRefOrGetter,
    VNode,
    WritableComputedRef
  } from 'vue'
  import('vue')
}
